// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: players_query.sql

package repo

import (
	"context"
)

const findLatestPlayerInfoByPolarisID = `-- name: FindLatestPlayerInfoByPolarisID :one
select id, polaris_id, name, rank, region_id, created_at, updated_at from players where polaris_id = $1 order by updated_at desc limit 1
`

func (q *Queries) FindLatestPlayerInfoByPolarisID(ctx context.Context, polarisID string) (Player, error) {
	row := q.db.QueryRow(ctx, findLatestPlayerInfoByPolarisID, polarisID)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.PolarisID,
		&i.Name,
		&i.Rank,
		&i.RegionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertNewPlayer = `-- name: InsertNewPlayer :one
insert into players (
	polaris_id, name, rank, region_id, created_at, updated_at
) values (
	$1,	$2, $3,	$4, $5, $6
)
returning id, polaris_id, name, rank, region_id, created_at, updated_at
`

type InsertNewPlayerParams struct {
	PolarisID string
	Name      string
	Rank      int32
	RegionID  int32
	CreatedAt int64
	UpdatedAt int64
}

func (q *Queries) InsertNewPlayer(ctx context.Context, arg InsertNewPlayerParams) (Player, error) {
	row := q.db.QueryRow(ctx, insertNewPlayer,
		arg.PolarisID,
		arg.Name,
		arg.Rank,
		arg.RegionID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.PolarisID,
		&i.Name,
		&i.Rank,
		&i.RegionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
