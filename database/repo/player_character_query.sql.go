// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: player_character_query.sql

package repo

import (
	"context"
)

const findPlayerCharacter = `-- name: FindPlayerCharacter :one
select id, polaris_id, chara_id, created_at, updated_at from player_characters where polaris_id = $1 AND chara_id = $2 limit 1
`

type FindPlayerCharacterParams struct {
	PolarisID string
	CharaID   int32
}

func (q *Queries) FindPlayerCharacter(ctx context.Context, arg FindPlayerCharacterParams) (PlayerCharacter, error) {
	row := q.db.QueryRow(ctx, findPlayerCharacter, arg.PolarisID, arg.CharaID)
	var i PlayerCharacter
	err := row.Scan(
		&i.ID,
		&i.PolarisID,
		&i.CharaID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertPlayerCharacter = `-- name: InsertPlayerCharacter :one
insert into player_characters (
	polaris_id, chara_id, created_at, updated_at
) values (
	$1, $2, $3, $4
)
returning id, polaris_id, chara_id, created_at, updated_at
`

type InsertPlayerCharacterParams struct {
	PolarisID string
	CharaID   int32
	CreatedAt int64
	UpdatedAt int64
}

func (q *Queries) InsertPlayerCharacter(ctx context.Context, arg InsertPlayerCharacterParams) (PlayerCharacter, error) {
	row := q.db.QueryRow(ctx, insertPlayerCharacter,
		arg.PolarisID,
		arg.CharaID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i PlayerCharacter
	err := row.Scan(
		&i.ID,
		&i.PolarisID,
		&i.CharaID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
